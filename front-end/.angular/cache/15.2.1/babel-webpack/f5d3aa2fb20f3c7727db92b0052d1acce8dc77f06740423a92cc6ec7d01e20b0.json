{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport { QUIZ_LIST } from '../mocks/quiz-list.mock';\nimport { serverUrl, httpOptionsBase } from '../configs/server.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let QuizService = /*#__PURE__*/(() => {\n  class QuizService {\n    constructor(http) {\n      this.http = http;\n      /*\r\n       Services Documentation:\r\n       https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\r\n       */\n      /*\r\n       The list of quiz.\r\n       The list is retrieved from the mock.\r\n       */\n      this.quizzes = QUIZ_LIST;\n      /*\r\n       Observable which contains the list of the quiz.\r\n       Naming convention: Add '$' at the end of the variable name to highlight it as an Observable.\r\n       */\n      this.quizzes$ = new BehaviorSubject(this.quizzes);\n      this.quizSelected$ = new Subject();\n      this.quizUrl = serverUrl + '/quizzes';\n      this.questionsPath = 'questions';\n      this.httpOptions = httpOptionsBase;\n      this.retrieveQuizzes();\n    }\n    retrieveQuizzes() {\n      this.http.get(this.quizUrl).subscribe(quizList => {\n        this.quizzes = quizList;\n        this.quizzes$.next(this.quizzes);\n      });\n    }\n    addQuiz(quiz) {\n      this.http.post(this.quizUrl, quiz, this.httpOptions).subscribe(() => this.retrieveQuizzes());\n      QUIZ_LIST.push(quiz);\n      this.quizzes$.next(QUIZ_LIST);\n    }\n    setSelectedQuiz(quizId) {\n      const urlWithId = this.quizUrl + '/' + quizId;\n      this.http.get(urlWithId).subscribe(quiz => {\n        this.quizSelected$.next(quiz);\n      });\n    }\n    deleteQuiz(quiz) {\n      const urlWithId = this.quizUrl + '/' + quiz.id;\n      this.http.delete(urlWithId, this.httpOptions).subscribe(() => this.retrieveQuizzes());\n      for (let i = 0; i < QUIZ_LIST.length; i++) {\n        if (QUIZ_LIST[i] === quiz) {\n          QUIZ_LIST.splice(i, 1);\n        }\n      }\n    }\n    addQuestion(quiz, question) {\n      const questionUrl = this.quizUrl + '/' + quiz.id + '/' + this.questionsPath;\n      this.http.post(questionUrl, question, this.httpOptions).subscribe(() => this.setSelectedQuiz(quiz.id));\n    }\n    deleteQuestion(quiz, question) {\n      const questionUrl = this.quizUrl + '/' + quiz.id + '/' + this.questionsPath + '/' + question.id;\n      this.http.delete(questionUrl, this.httpOptions).subscribe(() => this.setSelectedQuiz(quiz.id));\n    }\n  }\n  QuizService.ɵfac = function QuizService_Factory(t) {\n    return new (t || QuizService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  QuizService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizService,\n    factory: QuizService.ɵfac,\n    providedIn: 'root'\n  });\n  return QuizService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}